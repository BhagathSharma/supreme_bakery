
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    PM
    CONTRIBUTOR
    VIEWER
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[] // For WebAuthn
    Project       Project[]
    ProjectMember ProjectMember[]
    Task          Task[]          @relation("UserTasks")
    Comment       Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Project {
    id          String          @id @default(cuid())
    name        String
    description String?
    ownerId     String
    owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    columns     Column[]
    tasks       Task[]
    members     ProjectMember[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProjectMember {
    id        String @id @default(cuid())
    userId    String
    projectId String
    role      Role // Use enum here

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
    @@index([projectId])
}

model Column {
    id        String  @id @default(cuid())
    title     String
    order     Int
    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    tasks     Task[]
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    order       Int
    columnId    String
    column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
    projectId   String
    project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    assigneeId  String?
    assignee    User?     @relation("UserTasks", fields: [assigneeId], references: [id])
    dueDate     DateTime?
    priority    String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Comment   Comment[]

    @@index([projectId])
    @@index([columnId])
    @@index([assigneeId])
}

model Comment {
    id      String @id @default(cuid())
    content String
    taskId  String
    userId  String
    task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([taskId])
    @@index([userId])
}
